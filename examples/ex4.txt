-- how to elaborate: elabzoo-holes elab < example.txt
-- or in emacs shell: cat example.txt | elabzoo-holes elab

let id : (A : _) -> A -> A = \A x. x in

let List : U -> U = \A. (L : _) -> (A -> L -> L) -> L -> L in

let nil : (A : _) -> List A = \A L cons nil. nil in

let cons : (A : _) -> A -> List A -> List A = \A x xs L cons nil. cons x (xs _ cons nil) in

let Bool : U = (B : _) -> B -> B -> B in

let true : Bool = \B t f. t in

let false : Bool = \B t f. f in

let not : Bool -> Bool = \b B t f. b B f t in

let list1 : List Bool = cons _ (id _ true) (nil _) in

let Eq : (A : _) -> A -> A -> U = \A x y. (P : A -> U) -> P x -> P y in

let refl : (A : _) -> (x : A) -> Eq A x x = \A x P px. px in

let list1 : List Bool = cons _ true (cons _ false (nil _)) in

let Nat  : U = (N : U) -> (N -> N) -> N -> N in

let five : Nat = \N s z. s (s (s (s (s z)))) in

let add  : Nat -> Nat -> Nat = \a b N s z. a N s (b N s z) in

let mul  : Nat -> Nat -> Nat = \a b N s z. a N (b N s) z in

let ten      : Nat = add five five in

let hundred  : Nat = mul ten ten in

let thousand : Nat = mul ten hundred in

let eqTest : Eq _ hundred hundred = refl _ _ in

U